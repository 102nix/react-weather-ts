[{"/home/kostya/Документы/coding/react/TS/weather-react/src/App.tsx":"1","/home/kostya/Документы/coding/react/TS/weather-react/src/components/Weather/Weather.tsx":"2","/home/kostya/Документы/coding/react/TS/weather-react/src/index.tsx":"3","/home/kostya/Документы/coding/react/TS/weather-react/src/reportWebVitals.ts":"4","/home/kostya/Документы/coding/react/TS/weather-react/src/redux/store.ts":"5","/home/kostya/Документы/coding/react/TS/weather-react/src/api/api.ts":"6","/home/kostya/Документы/coding/react/TS/weather-react/src/redux/weatherReducer.ts":"7","/home/kostya/Документы/coding/react/TS/weather-react/src/redux/forecast5Reducer.ts":"8","/home/kostya/Документы/coding/react/TS/weather-react/src/components/DateTime/DateTime.tsx":"9","/home/kostya/Документы/coding/react/TS/weather-react/src/components/SelectCity/SelectCity.tsx":"10","/home/kostya/Документы/coding/react/TS/weather-react/src/components/InputCity/InputCity.tsx":"11","/home/kostya/Документы/coding/react/TS/weather-react/src/components/WeatherForecast/WeatherForecast.tsx":"12","/home/kostya/Документы/coding/react/TS/weather-react/src/components/TodayWeather/TodayWeather.tsx":"13","/home/kostya/Документы/coding/react/TS/weather-react/src/redux/forecast5ReducerAC.ts":"14"},{"size":913,"mtime":1614769953006,"results":"15","hashOfConfig":"16"},{"size":4225,"mtime":1614762324954,"results":"17","hashOfConfig":"16"},{"size":766,"mtime":1606812238647,"results":"18","hashOfConfig":"16"},{"size":425,"mtime":1606384518987,"results":"19","hashOfConfig":"16"},{"size":487,"mtime":1606570204553,"results":"20","hashOfConfig":"16"},{"size":1122,"mtime":1606596218670,"results":"21","hashOfConfig":"16"},{"size":2326,"mtime":1614770800294,"results":"22","hashOfConfig":"16"},{"size":2343,"mtime":1614772789782,"results":"23","hashOfConfig":"16"},{"size":939,"mtime":1614763113152,"results":"24","hashOfConfig":"16"},{"size":1331,"mtime":1614763850084,"results":"25","hashOfConfig":"16"},{"size":479,"mtime":1614763831020,"results":"26","hashOfConfig":"16"},{"size":916,"mtime":1614763472302,"results":"27","hashOfConfig":"16"},{"size":2449,"mtime":1614763275026,"results":"28","hashOfConfig":"16"},{"size":339,"mtime":1614772763462,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19vgfdz",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kostya/Документы/coding/react/TS/weather-react/src/App.tsx",["63"],"/home/kostya/Документы/coding/react/TS/weather-react/src/components/Weather/Weather.tsx",["64","65"],"import React, { useEffect } from 'react';\nimport './Weather.scss';\nimport { connect } from 'react-redux'\nimport { onGetWeather, onGetWeatherName, onGetWeatherGeo } from '../../redux/weatherReducer';\nimport { onGetForecastName } from '../../redux/forecast5Reducer';\n//Components:\nimport { DateTime } from '../DateTime/DateTime';\nimport { SelectCity } from '../SelectCity/SelectCity';\nimport { WeatherForecast } from '../WeatherForecast/WeatherForecast';\nimport { InputCity } from '../InputCity/InputCity';\nimport { TodayWeather } from '../TodayWeather/TodayWeather'\n//types:\nimport { InitialStateType, WeatherDispatchProps, InitialStateTypeRange } from '../../types/componentsTypes'\nimport { AppStateType } from '../../redux/store'\n// небольшой снег; небольшой дождь; туман; пасмурно; переменная облачность\n\n\ntype PropsType = InitialStateType & InitialStateTypeRange\n\nconst Weather: React.FC<PropsType & WeatherDispatchProps> = props => {\n\n  useEffect(() => {\n    handlerGeo()\n  }, [])\n\n  useEffect(() => {\n    if (props.cityName !== null) {\n      const city: string = props.cityName\n      props.onGetForecastName(city)\n    }\n  }, [props.cityName])\n\n  const showPosition = (position: any) => {\n    props.onGetWeatherGeo(position.coords.latitude, position.coords.longitude)\n  }\n\n  const handlerGeo = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition)\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      {\n        props.cityName !== null ?\n        <>\n          <div className=\"row date-time\">\n            <DateTime\n              cityName={props.cityName}\n              countryName={props.countryName}\n            />\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 col-lg-6 today-weather-all\">\n              <TodayWeather\n                temperatureC={props.temperatureC}\n                weatherFirst={props.weatherFirst}\n                windSpeedK={props.windSpeedK}\n                humidity={props.humidity}\n              />\n            </div>\n            <div className=\"col-12 col-lg-6 weather-forecast\">\n              <WeatherForecast weatherRange={props.weatherRange} />\n            </div>\n          </div>\n          <div className=\"row mt-5\">\n            <div className=\"col-12 col-lg-4\">\n              <SelectCity onGetWeatherName={props.onGetWeatherName} />\n            </div>\n            <div className=\"col-12 col-lg-4\">\n              <button className=\"btn btn-link\" onClick={handlerGeo}>Определить местоположение</button>\n            </div>\n            <div className=\"col-12 col-lg-4\">\n              <InputCity onGetWeatherName={props.onGetWeatherName} />\n            </div>\n          </div>\n        </>\n        : <>\n        <div className=\"row title-no-geo text-center\">\n          Город по данным геолокации не опредлён!\n        </div>\n        <div className=\"row mt-5 no-geo-for-city\">\n          <div className=\"select-city-no-geo\">\n            <div className=\"note-select-city\">Выберите город из списка:</div>\n              <SelectCity onGetWeatherName={props.onGetWeatherName} />\n            <div>или:</div>\n          </div>\n          <div className=\"write-city-no-geo\">\n            <div className=\"note-write-city\">Напишите город:</div>\n            <InputCity onGetWeatherName={props.onGetWeatherName}/>\n          </div>\n        </div>\n        </>\n      }\n    </div>\n  )\n}\nlet mapStateToProps = (state: AppStateType): PropsType => {\n  return {\n    cityName: state.weatherReducer.cityName,\n    countryName: state.weatherReducer.countryName,\n    temperatureC: state.weatherReducer.temperatureC,\n    windSpeedK: state.weatherReducer.windSpeedK,\n    weatherFirst: state.weatherReducer.weatherFirst,\n    weatherSecond: state.weatherReducer.weatherSecond,\n    humidity: state.weatherReducer.humidity,\n    cityNameRange: state.forecast5Reducer.cityNameRange,\n    weatherRange: state.forecast5Reducer.weatherRange,\n  }\n}\nconst connector = connect(mapStateToProps, { onGetWeather, onGetWeatherName, onGetWeatherGeo, onGetForecastName })\nexport default connector(Weather)","/home/kostya/Документы/coding/react/TS/weather-react/src/index.tsx",[],["66","67"],"/home/kostya/Документы/coding/react/TS/weather-react/src/reportWebVitals.ts",[],["68","69"],"/home/kostya/Документы/coding/react/TS/weather-react/src/redux/store.ts",[],["70","71"],"/home/kostya/Документы/coding/react/TS/weather-react/src/api/api.ts",[],"/home/kostya/Документы/coding/react/TS/weather-react/src/redux/weatherReducer.ts",["72"],"import { WeatherAPI } from '../api/api';\nimport { ActionsType, SetWeatherType, ThunkType } from '../types/ACTypes';\nimport { InitialStateType } from '../types/componentsTypes';\nimport { setWeather } from './weatherAC';\n\nexport const GET_WEATHER = 'GET_WEATHER'\n\nlet initialState: InitialStateType = {\n  cityName: null,\n  countryName: null,\n  temperatureC: null,\n  windSpeedK: null,\n  weatherFirst: null,\n  weatherSecond: null,\n  humidity: null\n}\n\nconst weatherReducer = (state = initialState, action: ActionsType) => {\n  switch (action.type) {\n    case GET_WEATHER:\n      return {\n        ...state,\n        cityName: action.objectWeather.cityName,\n        countryName: action.objectWeather.countryName,\n        temperatureC: action.objectWeather.temperatureC,\n        windSpeedK: action.objectWeather.windSpeedK,\n        weatherFirst: action.objectWeather.weatherFirst,\n        weatherSecond: action.objectWeather.weatherSecond,\n        humidity: action.objectWeather.humidity\n      }\n    default: return state\n  }\n}\n\nfunction prepareDataForDispatch (response: any) {\n  const objectWeather: InitialStateType = {\n    cityName: response.data.name,\n    countryName: response.data.sys.country,\n    temperatureC: Math.ceil(response.data.main.temp - 273.15),\n    windSpeedK: response.data.wind.speed,\n    weatherFirst: response.data.weather[0].description,\n    weatherSecond: response.data.weather[1] === undefined ? '' : response.data.weather[1].description,\n    humidity: response.data.main.humidity\n  }\n  return objectWeather\n}\n\nexport const onGetWeather = (): ThunkType => async (dispatch) => {\n  try {\n    const response = await WeatherAPI.getWeatherapi()\n    dispatch(setWeather(prepareDataForDispatch(response)))\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const onGetWeatherName = (name: string): ThunkType => async (dispatch) => {\n  try {\n    const response = await WeatherAPI.getWeatherName(name)\n    dispatch(setWeather(prepareDataForDispatch(response)))\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const onGetWeatherGeo = (lat: number, lon: number): ThunkType => async (dispatch) => {\n  try {\n    const response = await WeatherAPI.getWeatherGeo(lat, lon)\n    dispatch(setWeather(prepareDataForDispatch(response)))\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport default weatherReducer\n","/home/kostya/Документы/coding/react/TS/weather-react/src/redux/forecast5Reducer.ts",[],"/home/kostya/Документы/coding/react/TS/weather-react/src/components/DateTime/DateTime.tsx",[],"/home/kostya/Документы/coding/react/TS/weather-react/src/components/SelectCity/SelectCity.tsx",[],"/home/kostya/Документы/coding/react/TS/weather-react/src/components/InputCity/InputCity.tsx",[],"/home/kostya/Документы/coding/react/TS/weather-react/src/components/WeatherForecast/WeatherForecast.tsx",[],"/home/kostya/Документы/coding/react/TS/weather-react/src/components/TodayWeather/TodayWeather.tsx",[],"/home/kostya/Документы/coding/react/TS/weather-react/src/redux/forecast5ReducerAC.ts",[],{"ruleId":"73","severity":1,"message":"74","line":25,"column":6,"nodeType":"75","endLine":25,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":24,"column":6,"nodeType":"75","endLine":24,"endColumn":8,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":31,"column":6,"nodeType":"75","endLine":31,"endColumn":22,"suggestions":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"85"},{"ruleId":"83","replacedBy":"86"},{"ruleId":"81","replacedBy":"87"},{"ruleId":"83","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":23,"nodeType":"91","messageId":"92","endLine":2,"endColumn":37},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentDate'. Either include it or remove the dependency array.","ArrayExpression",["93"],"React Hook useEffect has a missing dependency: 'handlerGeo'. Either include it or remove the dependency array.",["94"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["95"],"no-native-reassign",["96"],"no-negated-in-lhs",["97"],["96"],["97"],["96"],["97"],"@typescript-eslint/no-unused-vars","'SetWeatherType' is defined but never used.","Identifier","unusedVar",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [currentDate]",{"range":"104","text":"105"},"Update the dependencies array to be: [handlerGeo]",{"range":"106","text":"107"},"Update the dependencies array to be: [props, props.cityName]",{"range":"108","text":"109"},[793,795],"[currentDate]",[981,983],"[handlerGeo]",[1130,1146],"[props, props.cityName]"]